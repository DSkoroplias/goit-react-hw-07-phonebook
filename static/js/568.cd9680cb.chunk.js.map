{"version":3,"file":"static/js/568.cd9680cb.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://goit-react-hw-07-phonebook/./src/modules/Phonebook/ContactForm/contact-form.module.scss?1d1b","modules/Phonebook/ContactForm/ContactForm.jsx","modules/Phonebook/ContactListEl/ContactListEl.jsx","modules/Phonebook/ContactList/contact-list.module.scss","modules/Phonebook/ContactList/ContactList.jsx","redux/filter/filter-selector.js","webpack://goit-react-hw-07-phonebook/./src/modules/Phonebook/ContactFilter/contact-filter.module.scss?5ecc","modules/Phonebook/ContactFilter/ContactFilter.jsx","webpack://goit-react-hw-07-phonebook/./src/modules/Phonebook/phonebook.module.scss?7709","modules/Phonebook/Phonebook.jsx","page/Home/Home.jsx"],"sourcesContent":["export const getAllContacts = store => store.contacts;\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"contact-form_block__kwj7e\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { addContact } from 'redux/contacts/contacts-slice';\nimport { getAllContacts } from 'redux/contacts/contacts-selectors';\n\nimport styles from './contact-form.module.scss';\n\nconst ContactForm = () => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n\n  const allContacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleAddContact({ name, number });\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  const isDuplicate = name => {\n    const normalizedName = name.toUpperCase();\n\n    const result = allContacts.find(({ name }) => {\n      return name.toUpperCase() === normalizedName;\n    });\n    return Boolean(result);\n  };\n\n  const handleAddContact = ({ name, number }) => {\n    if (isDuplicate(name)) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n\n    dispatch(addContact({ name, number }));\n  };\n\n  const { name, number } = state;\n\n  return (\n    <div className={styles.block}>\n      <form onSubmit={handleSubmit}>\n        <div className={styles.formGroup}>\n          <label>Name</label>\n          <input\n            onChange={handleChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </div>\n        <div className={styles.formGroup}>\n          <label>Number</label>\n          <input\n            onChange={handleChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     const { onSubmit } = this.props;\n//     const result = onSubmit({ ...this.state });\n//     if (result) {\n//       this.reset();\n//     }\n//   };\n\n//   reset() {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   }\n\n//   handleChange = ({ target }) => {\n//     const { name, value } = target;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   render() {\n//     const { handleChange, handleSubmit } = this;\n//     const { name, number } = this.state;\n//     return (\n//       <div className={styles.block}>\n//         <form onSubmit={handleSubmit}>\n//           <div className={styles.formGroup}>\n//             <label>Name</label>\n//             <input\n//               onChange={handleChange}\n//               value={name}\n//               type=\"text\"\n//               name=\"name\"\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//             />\n//           </div>\n//           <div className={styles.formGroup}>\n//             <label>Number</label>\n//             <input\n//               onChange={handleChange}\n//               value={number}\n//               type=\"tel\"\n//               name=\"number\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add contact</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ContactListEl = ({ id, name, number, removeContact }) => {\n  return (\n    <ul>\n      <li key={id}>\n        {name}: {number}\n        <button onClick={removeContact} type=\"button\">\n          Delete\n        </button>\n      </li>\n    </ul>\n  );\n};\n\nexport default ContactListEl;\n\nContactListEl.propTypes = {\n  removeContact: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { removeContact } from 'redux/contacts/contacts-slice';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\n\nimport ContactListEl from '../ContactListEl/ContactListEl';\n\nimport styles from './contact-list.module.scss';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  const handleRemoveContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <div className={styles.contacts}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListEl\n          key={id}\n          name={name}\n          number={number}\n          removeContact={() => handleRemoveContact(id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ContactList;\n\nContactList.defaultProps = {\n  // contacts: [],\n};\n\nContactList.propTypes = {\n  removeContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"contact-filter_formGroup__7NSTt\"};","import { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getFilter } from 'redux/filter/filter-selector';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport styles from './contact-filter.module.scss';\n\nconst ContactFilter = () => {\n  const handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.formGroup}>\n      <label htmlFor=\"\">Find contacts by name</label>\n      <input\n        value={filter}\n        onChange={handleFilter}\n        name=\"filter\"\n        type=\"text\"\n        placeholder=\"Filter books\"\n      />\n    </div>\n  );\n};\n\nexport default ContactFilter;\n\nContactFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"phonebook_wrapper__U-FYE\",\"block\":\"phonebook_block__jmJea\"};","import { useSelector } from 'react-redux';\n\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport ContactFilter from './ContactFilter/ContactFilter';\n\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\n\nimport styles from './phonebook.module.scss';\n\nconst Phonebook = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  const isContacts = Boolean(filteredContacts.length);\n\n  return (\n    <div className={styles.wrapper}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h1>Contacts</h1>\n      <ContactFilter />\n      {isContacts && <ContactList />}\n      {!isContacts && <p>No contacts</p>}\n    </div>\n  );\n};\n\nexport default Phonebook;\n","import Phonebook from 'modules/Phonebook/Phonebook';\n\nconst Home = () => {\n  return <Phonebook />;\n};\n\nexport default Home;\n"],"names":["getAllContacts","store","contacts","getFilteredContacts","filter","normalizedFilter","toLowerCase","name","includes","useState","number","state","setState","allContacts","useSelector","dispatch","useDispatch","handleChange","target","value","prevState","handleAddContact","normalizedName","toUpperCase","result","find","Boolean","isDuplicate","alert","addContact","className","styles","onSubmit","e","preventDefault","onChange","type","pattern","title","required","id","removeContact","onClick","ContactList","filteredContacts","map","handleRemoveContact","defaultProps","getFilter","htmlFor","setFilter","placeholder","isContacts","length"],"sourceRoot":""}